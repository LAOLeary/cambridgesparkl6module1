{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2c6af927",
   "metadata": {
    "papermill": {
     "duration": 0.004218,
     "end_time": "2025-04-21T19:18:51.750748",
     "exception": false,
     "start_time": "2025-04-21T19:18:51.746530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Linear Regression Pre-Workshop Example (Done at a later stage) - 21Apr25 Example\n",
    "## https://app.edukate.ai/modules/11286/markdown_page/9703"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b428012a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:51.758474Z",
     "iopub.status.busy": "2025-04-21T19:18:51.758254Z",
     "iopub.status.idle": "2025-04-21T19:18:54.395127Z",
     "shell.execute_reply": "2025-04-21T19:18:54.394113Z"
    },
    "papermill": {
     "duration": 2.642195,
     "end_time": "2025-04-21T19:18:54.396286",
     "exception": false,
     "start_time": "2025-04-21T19:18:51.754091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/linregdata/linregdata.csv\n",
      "/kaggle/input/real-estate-data/real_estate_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/linregdata/linregdata.csv')\n",
    "df2 = pd.read_csv(\"/kaggle/input/real-estate-data/real_estate_data.csv\")\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "640c53ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.404179Z",
     "iopub.status.busy": "2025-04-21T19:18:54.403934Z",
     "iopub.status.idle": "2025-04-21T19:18:54.425686Z",
     "shell.execute_reply": "2025-04-21T19:18:54.424841Z"
    },
    "papermill": {
     "duration": 0.026773,
     "end_time": "2025-04-21T19:18:54.426708",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.399935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10 entries, 0 to 9\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   feature1       10 non-null     int64  \n",
      " 1   feature2       10 non-null     float64\n",
      " 2   target_column  10 non-null     float64\n",
      "dtypes: float64(2), int64(1)\n",
      "memory usage: 372.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bfac7bf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.434708Z",
     "iopub.status.busy": "2025-04-21T19:18:54.434419Z",
     "iopub.status.idle": "2025-04-21T19:18:54.450775Z",
     "shell.execute_reply": "2025-04-21T19:18:54.450093Z"
    },
    "papermill": {
     "duration": 0.021431,
     "end_time": "2025-04-21T19:18:54.451832",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.430401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature1</th>\n",
       "      <th>feature2</th>\n",
       "      <th>target_column</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3.764052</td>\n",
       "      <td>15.580244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.400157</td>\n",
       "      <td>24.109019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>6.978738</td>\n",
       "      <td>34.458289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>10.240893</td>\n",
       "      <td>46.966030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>11.867558</td>\n",
       "      <td>56.490400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   feature1   feature2  target_column\n",
       "0         1   3.764052      15.580244\n",
       "1         2   4.400157      24.109019\n",
       "2         3   6.978738      34.458289\n",
       "3         4  10.240893      46.966030\n",
       "4         5  11.867558      56.490400"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eea99d4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.460003Z",
     "iopub.status.busy": "2025-04-21T19:18:54.459822Z",
     "iopub.status.idle": "2025-04-21T19:18:54.498413Z",
     "shell.execute_reply": "2025-04-21T19:18:54.497759Z"
    },
    "papermill": {
     "duration": 0.043975,
     "end_time": "2025-04-21T19:18:54.499646",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.455671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "─────────────────────────── INFO ───────────────────────────\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10 entries, 0 to 9\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   feature1       10 non-null     int64  \n",
      " 1   feature2       10 non-null     float64\n",
      " 2   target_column  10 non-null     float64\n",
      "dtypes: float64(2), int64(1)\n",
      "memory usage: 372.0 bytes\n",
      "─────────────────────────\n",
      "─ STATS ──────────────────────────\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>feature1</th>\n",
       "      <td>10.0</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>3.027650</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>7.750000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feature2</th>\n",
       "      <td>10.0</td>\n",
       "      <td>11.738023</td>\n",
       "      <td>5.609590</td>\n",
       "      <td>3.764052</td>\n",
       "      <td>7.794277</td>\n",
       "      <td>11.445140</td>\n",
       "      <td>15.624004</td>\n",
       "      <td>20.410599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target_column</th>\n",
       "      <td>10.0</td>\n",
       "      <td>58.015362</td>\n",
       "      <td>28.205258</td>\n",
       "      <td>15.580244</td>\n",
       "      <td>37.585224</td>\n",
       "      <td>57.112958</td>\n",
       "      <td>78.311315</td>\n",
       "      <td>99.523604</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               count       mean        std        min        25%        50%  \\\n",
       "feature1        10.0   5.500000   3.027650   1.000000   3.250000   5.500000   \n",
       "feature2        10.0  11.738023   5.609590   3.764052   7.794277  11.445140   \n",
       "target_column   10.0  58.015362  28.205258  15.580244  37.585224  57.112958   \n",
       "\n",
       "                     75%        max  \n",
       "feature1        7.750000  10.000000  \n",
       "feature2       15.624004  20.410599  \n",
       "target_column  78.311315  99.523604  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "───────────────────\n",
      "─ MISSING & UNIQUE ─────────────────────\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missing</th>\n",
       "      <th>unique</th>\n",
       "      <th>dtype</th>\n",
       "      <th>skew</th>\n",
       "      <th>mem_usage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Index</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feature1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feature2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>float64</td>\n",
       "      <td>-0.019785</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target_column</th>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>float64</td>\n",
       "      <td>-0.058924</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               missing  unique    dtype      skew  mem_usage\n",
       "Index              NaN     NaN      NaN       NaN        132\n",
       "feature1           0.0    10.0    int64  0.000000         80\n",
       "feature2           0.0    10.0  float64 -0.019785         80\n",
       "target_column      0.0    10.0  float64 -0.058924         80"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "──────────────────────\n",
      "─ CORRELATION ───────────────────────\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature1</th>\n",
       "      <th>feature2</th>\n",
       "      <th>target_column</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>feature1</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.987628</td>\n",
       "      <td>0.995491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feature2</th>\n",
       "      <td>0.987628</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.996377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target_column</th>\n",
       "      <td>0.995491</td>\n",
       "      <td>0.996377</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               feature1  feature2  target_column\n",
       "feature1       1.000000  0.987628       0.995491\n",
       "feature2       0.987628  1.000000       0.996377\n",
       "target_column  0.995491  0.996377       1.000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def quick_eda(df):\n",
    "    print(\"─ INFO ─\".center(60, \"─\"))\n",
    "    df.info()\n",
    "    \n",
    "    print(\"\\n─ STATS ─\".center(60, \"─\"))\n",
    "    display(df.describe(include='all').T)\n",
    "    \n",
    "    print(\"\\n─ MISSING & UNIQUE ─\".center(60, \"─\"))\n",
    "    display(pd.DataFrame({\n",
    "        \"missing\":    df.isnull().sum(),\n",
    "        \"unique\":     df.nunique(),\n",
    "        \"dtype\":      df.dtypes,\n",
    "        \"skew\":       df.select_dtypes(\"number\").skew(),\n",
    "        \"mem_usage\":  df.memory_usage(deep=True)\n",
    "    }))\n",
    "    \n",
    "    print(\"\\n─ CORRELATION ─\".center(60, \"─\"))\n",
    "    display(df.corr())\n",
    "\n",
    "# Usage\n",
    "quick_eda(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b52c4499",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.509269Z",
     "iopub.status.busy": "2025-04-21T19:18:54.509052Z",
     "iopub.status.idle": "2025-04-21T19:18:54.512605Z",
     "shell.execute_reply": "2025-04-21T19:18:54.511781Z"
    },
    "papermill": {
     "duration": 0.00988,
     "end_time": "2025-04-21T19:18:54.514090",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.504210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from ydata_profiling import ProfileReport\n",
    "#ProfileReport(df, title=\"Quick EDA\", minimal=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b26ca15e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.523636Z",
     "iopub.status.busy": "2025-04-21T19:18:54.523351Z",
     "iopub.status.idle": "2025-04-21T19:18:54.530389Z",
     "shell.execute_reply": "2025-04-21T19:18:54.529763Z"
    },
    "papermill": {
     "duration": 0.012666,
     "end_time": "2025-04-21T19:18:54.531348",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.518682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   feature1   feature2\n",
      "0         1   3.764052\n",
      "1         2   4.400157\n",
      "2         3   6.978738\n",
      "3         4  10.240893\n",
      "4         5  11.867558\n",
      "5         6  11.022722\n",
      "6         7  14.950088\n",
      "7         8  15.848643\n",
      "8         9  17.896781\n",
      "9        10  20.410599\n"
     ]
    }
   ],
   "source": [
    "X = df[[\"feature1\", \"feature2\"]] #features\n",
    "y = df[\"target_column\"] #target\n",
    "print (X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "86389157",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.540135Z",
     "iopub.status.busy": "2025-04-21T19:18:54.539900Z",
     "iopub.status.idle": "2025-04-21T19:18:54.544964Z",
     "shell.execute_reply": "2025-04-21T19:18:54.544379Z"
    },
    "papermill": {
     "duration": 0.010644,
     "end_time": "2025-04-21T19:18:54.545930",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.535286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=136)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d9ed3a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.554129Z",
     "iopub.status.busy": "2025-04-21T19:18:54.553964Z",
     "iopub.status.idle": "2025-04-21T19:18:54.556957Z",
     "shell.execute_reply": "2025-04-21T19:18:54.556402Z"
    },
    "papermill": {
     "duration": 0.008113,
     "end_time": "2025-04-21T19:18:54.557886",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.549773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e77fe9b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.566043Z",
     "iopub.status.busy": "2025-04-21T19:18:54.565868Z",
     "iopub.status.idle": "2025-04-21T19:18:54.598388Z",
     "shell.execute_reply": "2025-04-21T19:18:54.597752Z"
    },
    "papermill": {
     "duration": 0.037711,
     "end_time": "2025-04-21T19:18:54.599397",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.561686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3cdf61a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.609481Z",
     "iopub.status.busy": "2025-04-21T19:18:54.609024Z",
     "iopub.status.idle": "2025-04-21T19:18:54.615470Z",
     "shell.execute_reply": "2025-04-21T19:18:54.614894Z"
    },
    "papermill": {
     "duration": 0.012709,
     "end_time": "2025-04-21T19:18:54.616573",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.603864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b246a977",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.625681Z",
     "iopub.status.busy": "2025-04-21T19:18:54.625434Z",
     "iopub.status.idle": "2025-04-21T19:18:54.841814Z",
     "shell.execute_reply": "2025-04-21T19:18:54.841092Z"
    },
    "papermill": {
     "duration": 0.221991,
     "end_time": "2025-04-21T19:18:54.842850",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.620859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAAJOCAYAAABBWYj1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABkA0lEQVR4nO3dd3gU5eL28e+mh5SFQAqhJKGDIAgoBqUIKCIWICJwUGl2UBCxIAcQEbFhVxDlYKEISJFyBCG0gyBVEJRuKAIBBJMQStrO+8f83NcY0F3YZJLN/bmuvUhmJ7P3ZM/Bm2eefcZmGIaBiIiIiPwjH6sDiIiIiJQUKk4iIiIiLlJxEhEREXGRipOIiIiIi1ScRERERFyk4iQiIiLiIhUnERERERepOImIiIi4SMVJRERExEUqTiJiGZvNxgsvvGB1DMu1bt2a1q1bO78/cOAANpuNTz/91LJMf/XXjCKllYqTiJf48MMPsdlsNGvW7LKPcfToUV544QW2bt3quWDF3MqVK7HZbM6Hv78/1apV4/777+eXX36xOp5b1q5dywsvvEBaWprVUUS8lp/VAUTEM6ZOnUp8fDwbNmxg37591KhRw+1jHD16lFGjRhEfH0+jRo08H7IYe+KJJ7j22mvJyclhy5YtTJw4kUWLFrF9+3ZiY2OLNEtcXBznz5/H39/frZ9bu3Yto0aNonfv3pQtW7ZwwomUchpxEvECKSkprF27ljfffJPIyEimTp1qdaQSp0WLFtx777306dOH9957jzfeeIPTp0/z2WefXfJnzp49WyhZbDYbQUFB+Pr6FsrxReTyqTiJeIGpU6dSrlw5OnbsyN13333J4pSWlsaTTz5JfHw8gYGBVK5cmfvvv5/ffvuNlStXcu211wLQp08f56WrP+bZxMfH07t37wLH/Ovcl+zsbEaMGEGTJk2w2+2EhITQokULVqxY4fZ5HT9+HD8/P0aNGlXgud27d2Oz2Xj//fcByMnJYdSoUdSsWZOgoCDKly/PjTfeyNKlS91+XYA2bdoAZikFeOGFF7DZbPz888/861//oly5ctx4443O/adMmUKTJk0IDg4mIiKC7t27c/jw4QLHnThxItWrVyc4OJjrrruO//3vfwX2udQcp127dnHPPfcQGRlJcHAwtWvXZtiwYc58Tz/9NAAJCQnO9+/AgQOFklGktNKlOhEvMHXqVLp06UJAQAA9evRg/PjxbNy40VmEADIzM2nRogU7d+6kb9++NG7cmN9++4358+fz66+/UrduXV588UVGjBjBQw89RIsWLQBo3ry5W1kyMjL45JNP6NGjBw8++CBnzpxh0qRJtG/fng0bNrh1CTA6OppWrVoxc+ZMRo4cme+5GTNm4OvrS9euXQGzOIwdO5YHHniA6667joyMDDZt2sSWLVu4+eab3ToHgP379wNQvnz5fNu7du1KzZo1efnllzEMA4AxY8YwfPhw7rnnHh544AFOnjzJe++9R8uWLfnhhx+cl80mTZrEww8/TPPmzRk0aBC//PILd955JxEREVSpUuVv8/z444+0aNECf39/HnroIeLj49m/fz8LFixgzJgxdOnShT179jB9+nTeeustKlSoAEBkZGSRZRQpFQwRKdE2bdpkAMbSpUsNwzAMh8NhVK5c2Rg4cGC+/UaMGGEAxpw5cwocw+FwGIZhGBs3bjQAY/LkyQX2iYuLM3r16lVge6tWrYxWrVo5v8/NzTWysrLy7fP7778b0dHRRt++ffNtB4yRI0f+7fl99NFHBmBs37493/Z69eoZbdq0cX7fsGFDo2PHjn97rItZsWKFARj/+c9/jJMnTxpHjx41Fi1aZMTHxxs2m83YuHGjYRiGMXLkSAMwevToke/nDxw4YPj6+hpjxozJt3379u2Gn5+fc3t2drYRFRVlNGrUKN/vZ+LEiQaQ73eYkpJS4H1o2bKlERYWZhw8eDDf6/zx3hmGYbz++usGYKSkpBR6RpHSSpfqREq4qVOnEh0dzU033QSY82O6devGl19+SV5ennO/2bNn07BhQzp37lzgGDabzWN5fH19CQgIAMDhcHD69Glyc3Np2rQpW7Zscft4Xbp0wc/PjxkzZji37dixg59//plu3bo5t5UtW5affvqJvXv3Xlbuvn37EhkZSWxsLB07duTs2bN89tlnNG3aNN9+jzzySL7v58yZg8Ph4J577uG3335zPmJiYqhZs6bzEuWmTZs4ceIEjzzyiPP3A9C7d2/sdvvfZjt58iSrV6+mb9++VK1aNd9zrrx3RZFRpLTQpTqREiwvL48vv/ySm266yTkXB6BZs2aMGzeO5ORkbrnlFsC89JSUlFQkuT777DPGjRvHrl27yMnJcW5PSEhw+1gVKlSgbdu2zJw5k9GjRwPmZTo/Pz+6dOni3O/FF1/krrvuolatWtSvX59bb72V++67j6uvvtql1xkxYgQtWrTA19eXChUqULduXfz8Cv4V+ddz2Lt3L4ZhULNmzYse949Pxh08eBCgwH5/LH/wd/5YFqF+/founctfFUVGkdJCxUmkBFu+fDnHjh3jyy+/5Msvvyzw/NSpU53F6UpdamQjLy8v36e/pkyZQu/evenUqRNPP/00UVFR+Pr6MnbsWOe8IXd1796dPn36sHXrVho1asTMmTNp27atcx4PQMuWLdm/fz9ff/013377LZ988glvvfUWEyZM4IEHHvjH12jQoAHt2rX7x/2Cg4Pzfe9wOLDZbHzzzTcX/RRcaGioC2dYuEpCRpGSQsVJpASbOnUqUVFRfPDBBwWemzNnDnPnzmXChAkEBwdTvXp1duzY8bfH+7vLPuXKlbvowooHDx7MNxrx1VdfUa1aNebMmZPveH+d3O2OTp068fDDDzsv1+3Zs4ehQ4cW2C8iIoI+ffrQp08fMjMzadmyJS+88IJLxelyVa9eHcMwSEhIoFatWpfcLy4uDjBHf/74xB6YnwZMSUmhYcOGl/zZP36/l/v+FUVGkdJCc5xESqjz588zZ84cbr/9du6+++4CjwEDBnDmzBnmz58PQFJSEtu2bWPu3LkFjmX836fDQkJCAC5akKpXr873339Pdna2c9vChQsLfJz9jxGNP44JsH79etatW3fZ51q2bFnat2/PzJkz+fLLLwkICKBTp0759jl16lS+70NDQ6lRowZZWVmX/bqu6NKlC76+vowaNSrfOYP5O/gjV9OmTYmMjGTChAn5foeffvrpP670HRkZScuWLfnPf/7DoUOHCrzGHy71/hVFRpHSQiNOIiXU/PnzOXPmDHfeeedFn7/++uudi2F269aNp59+mq+++oquXbvSt29fmjRpwunTp5k/fz4TJkygYcOGVK9enbJlyzJhwgTCwsIICQmhWbNmJCQk8MADD/DVV19x6623cs8997B//36mTJlC9erV873u7bffzpw5c+jcuTMdO3YkJSWFCRMmUK9ePTIzMy/7fLt168a9997Lhx9+SPv27QusjF2vXj1at25NkyZNiIiIYNOmTXz11VcMGDDgsl/TFdWrV+ell15i6NChHDhwgE6dOhEWFkZKSgpz587loYceYsiQIfj7+/PSSy/x8MMP06ZNG7p160ZKSgqTJ092af7Qu+++y4033kjjxo156KGHSEhI4MCBAyxatMh5i5wmTZoAMGzYMLp3746/vz933HFHkWUUKRUs+jSfiFyhO+64wwgKCjLOnj17yX169+5t+Pv7G7/99pthGIZx6tQpY8CAAUalSpWMgIAAo3LlykavXr2czxuGYXz99ddGvXr1DD8/vwIfiR83bpxRqVIlIzAw0LjhhhuMTZs2FViOwOFwGC+//LIRFxdnBAYGGtdcc42xcOFCo1evXkZcXFy+fLiwHMEfMjIyjODgYAMwpkyZUuD5l156ybjuuuuMsmXLGsHBwUadOnWMMWPGGNnZ2X973D+WI5g1a9bf7vfHcgQnT5686POzZ882brzxRiMkJMQICQkx6tSpY/Tv39/YvXt3vv0+/PBDIyEhwQgMDDSaNm1qrF69usDv8GLLERiGYezYscPo3LmzUbZsWSMoKMioXbu2MXz48Hz7jB492qhUqZLh4+NTYGkCT2YUKa1shvGXcVsRERERuSjNcRIRERFxkYqTiIiIiItUnERERERcpOIkIiIi4iIVJxEREREXqTiJiIiIuMjrF8B0OBwcPXqUsLAwj94BXkRERLyDYRicOXOG2NhYfHz+fkzJ64vT0aNHqVKlitUxREREpJg7fPgwlStX/tt9vL44hYWFAeYvIzw83OI0IiIiUtxkZGRQpUoVZ2f4O15fnP64PBceHq7iJCIiIpfkypQeTQ4XERERcZGKk4iIiIiLVJxEREREXKTiJCIiIuIiFScRERERF6k4iYiIiLhIxUlERETERSpOIiIiIi5ScRIRERFxkYqTiIiIiItUnERERERcpOIkIiIi4iIVJxEREREXqTiJiIiIuEjFSURERMRFKk4iIiIiLlJxEhEREXGRipOIiIiIiywtTmfOnGHQoEHExcURHBxM8+bN2bhxo/N5wzAYMWIEFStWJDg4mHbt2rF3714LE4uIiEhpZmlxeuCBB1i6dClffPEF27dv55ZbbqFdu3YcOXIEgNdee413332XCRMmsH79ekJCQmjfvj0XLlywMraIiIgUJcOwOoGTzTCsSXP+/HnCwsL4+uuv6dixo3N7kyZN6NChA6NHjyY2NpannnqKIUOGAJCenk50dDSffvop3bt3d+l1MjIysNvtpKenEx4eXijnIiIiIoVkzx7o0wemToX4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4eHhpe7/QH8ozecOOv/SfP6l+dxB51+az78ozv2fRpr+oMnhIiIiIi5ScRIRERFxkYpTCRMYGMjIkSMJDAy0OkqRK83nDjr/0nz+pfncQedfms+/OJ67108OFxEREfEUjTiJiIiIuEjFSURERMRFKk4iIiIiLlJxKobGjh3LtddeS1hYGFFRUXTq1Indu3fn2+fChQv079+f8uXLExoaSlJSEsePH7cosWeNHz+eq6++2rluR2JiIt98843zeW8+97965ZVXsNlsDBo0yLnNm8//hRdewGaz5XvUqVPH+bw3n/sfjhw5wr333kv58uUJDg6mQYMGbNq0yfm8YRiMGDGCihUrEhwcTLt27di7d6+FiT0jPj6+wHtvs9no378/4P3vfV5eHsOHDychIYHg4GCqV6/O6NGj890CxFvfezBX7B40aBBxcXEEBwfTvHlzNm7c6Hy+WJ27IcVO+/btjcmTJxs7duwwtm7datx2221G1apVjczMTOc+jzzyiFGlShUjOTnZ2LRpk3H99dcbzZs3tzC158yfP99YtGiRsWfPHmP37t3G888/b/j7+xs7duwwDMO7z/3PNmzYYMTHxxtXX321MXDgQOd2bz7/kSNHGldddZVx7Ngx5+PkyZPO57353A3DME6fPm3ExcUZvXv3NtavX2/88ssvxpIlS4x9+/Y593nllVcMu91uzJs3z9i2bZtx5513GgkJCcb58+ctTH7lTpw4ke99X7p0qQEYK1asMAzD+9/7MWPGGOXLlzcWLlxopKSkGLNmzTJCQ0ONd955x7mPt773hmEY99xzj1GvXj1j1apVxt69e42RI0ca4eHhxq+//moYRvE6dxWnEuDEiRMGYKxatcowDMNIS0sz/P39jVmzZjn32blzpwEY69atsypmoSpXrpzxySeflJpzP3PmjFGzZk1j6dKlRqtWrZzFydvPf+TIkUbDhg0v+py3n7thGMazzz5r3HjjjZd83uFwGDExMcbrr7/u3JaWlmYEBgYa06dPL4qIRWbgwIFG9erVDYfDUSre+44dOxp9+/bNt61Lly5Gz549DcPw7vf+3Llzhq+vr7Fw4cJ82xs3bmwMGzas2J27LtWVAOnp6QBEREQAsHnzZnJycmjXrp1znzp16lC1alXWrVtnScbCkpeXx5dffsnZs2dJTEwsNefev39/OnbsmO88oXS893v37iU2NpZq1arRs2dPDh06BJSOc58/fz5Nmzala9euREVFcc011/Dxxx87n09JSSE1NTXf78But9OsWTOv+R0AZGdnM2XKFPr27YvNZisV733z5s1JTk5mz549AGzbto01a9bQoUMHwLvf+9zcXPLy8ggKCsq3PTg4mDVr1hS7c/f6e9WVdA6Hg0GDBnHDDTdQv359AFJTUwkICKBs2bL59o2OjiY1NdWClJ63fft2EhMTuXDhAqGhocydO5d69eqxdetWrz/3L7/8ki1btuS7vv8Hb3/vmzVrxqeffkrt2rU5duwYo0aNokWLFuzYscPrzx3gl19+Yfz48QwePJjnn3+ejRs38sQTTxAQEECvXr2c5xkdHZ3v57zpdwAwb9480tLS6N27N+D9/7sHeO6558jIyKBOnTr4+vqSl5fHmDFj6NmzJ4BXv/dhYWEkJiYyevRo6tatS3R0NNOnT2fdunXUqFGj2J27ilMx179/f3bs2MGaNWusjlKkateuzdatW0lPT+err76iV69erFq1yupYhe7w4cMMHDiQpUuXFvjXV2nwx7+uAa6++mqaNWtGXFwcM2fOJDg42MJkRcPhcNC0aVNefvllAK655hp27NjBhAkT6NWrl8Xpis6kSZPo0KEDsbGxVkcpMjNnzmTq1KlMmzaNq666iq1btzJo0CBiY2NLxXv/xRdf0LdvXypVqoSvry+NGzemR48ebN682epoBehSXTE2YMAAFi5cyIoVK6hcubJze0xMDNnZ2aSlpeXb//jx48TExBRxysIREBBAjRo1aNKkCWPHjqVhw4a88847Xn/umzdv5sSJEzRu3Bg/Pz/8/PxYtWoV7777Ln5+fkRHR3v1+f9V2bJlqVWrFvv27fP69x6gYsWK1KtXL9+2unXrOi9X/nGef/00mTf9Dg4ePMiyZct44IEHnNtKw3v/9NNP89xzz9G9e3caNGjAfffdx5NPPsnYsWMB73/vq1evzqpVq8jMzOTw4cNs2LCBnJwcqlWrVuzOXcWpGDIMgwEDBjB37lyWL19OQkJCvuebNGmCv78/ycnJzm27d+/m0KFDJCYmFnXcIuFwOMjKyvL6c2/bti3bt29n69atzkfTpk3p2bOn82tvPv+/yszMZP/+/VSsWNHr33uAG264ocDSI3v27CEuLg6AhIQEYmJi8v0OMjIyWL9+vdf8DiZPnkxUVBQdO3Z0bisN7/25c+fw8cn/n2RfX18cDgdQOt57gJCQECpWrMjvv//OkiVLuOuuu4rfuRf5dHT5R48++qhht9uNlStX5vt47rlz55z7PPLII0bVqlWN5cuXG5s2bTISExONxMREC1N7znPPPWesWrXKSElJMX788UfjueeeM2w2m/Htt98ahuHd534xf/5UnWF49/k/9dRTxsqVK42UlBTju+++M9q1a2dUqFDBOHHihGEY3n3uhmEuQeHn52eMGTPG2Lt3rzF16lSjTJkyxpQpU5z7vPLKK0bZsmWNr7/+2vjxxx+Nu+66y2s+kp6Xl2dUrVrVePbZZws85+3vfa9evYxKlSo5lyOYM2eOUaFCBeOZZ55x7uPN7/3ixYuNb775xvjll1+Mb7/91mjYsKHRrFkzIzs72zCM4nXuKk7FEHDRx+TJk537nD9/3njssceMcuXKGWXKlDE6d+5sHDt2zLrQHtS3b18jLi7OCAgIMCIjI422bds6S5NhePe5X8xfi5M3n3+3bt2MihUrGgEBAUalSpWMbt265VvDyJvP/Q8LFiww6tevbwQGBhp16tQxJk6cmO95h8NhDB8+3IiOjjYCAwONtm3bGrt377YorWctWbLEAC56Pt7+3mdkZBgDBw40qlatagQFBRnVqlUzhg0bZmRlZTn38eb3fsaMGUa1atWMgIAAIyYmxujfv7+RlpbmfL44nbvNMP60LKmIiIiIXJLmOImIiIi4SMVJRERExEUqTiIiIiIuUnESERERcZGKk4iIiIiLVJxEREREXKTiJCIiIuIiFScRERERF6k4iYjXs9lszJs3z+oYIuIFVJxExGPWrVuHr69vvhu0uio+Pp63337b86Fc0Lp1awYNGmTJa19KccwkIipOIuJBkyZN4vHHH2f16tUcPXrU6jhFLjs72+oIIlLIVJxExCMyMzOZMWMGjz76KB07duTTTz8tsM+CBQu49tprCQoKokKFCnTu3BkwR1cOHjzIk08+ic1mw2azAfDCCy/QqFGjfMd4++23iY+Pd36/ceNGbr75ZipUqIDdbqdVq1Zs2bLF5dy9e/dm1apVvPPOO87XPnDgAHl5efTr14+EhASCg4OpXbs277zzToGf7dSpE2PGjCE2NpbatWsDsHbtWho1akRQUBBNmzZl3rx52Gw2tm7d6vzZHTt20KFDB0JDQ4mOjua+++7jt99++9tMImI9FScR8YiZM2dSp04dateuzb333st//vMf/nwP8UWLFtG5c2duu+02fvjhB5KTk7nuuusAmDNnDpUrV+bFF1/k2LFjHDt2zOXXPXPmDL169WLNmjV8//331KxZk9tuu40zZ8649PPvvPMOiYmJPPjgg87XrlKlCg6Hg8qVKzNr1ix+/vlnRowYwfPPP8/MmTPz/XxycjK7d+9m6dKlLFy4kIyMDO644w4aNGjAli1bGD16NM8++2y+n0lLS6NNmzZcc801bNq0icWLF3P8+HHuueeev80kItbzszqAiHiHSZMmce+99wJw6623kp6ezqpVq2jdujUAY8aMoXv37owaNcr5Mw0bNgQgIiICX19fwsLCiImJcet127Rpk+/7iRMnUrZsWVatWsXtt9/+jz9vt9sJCAigTJky+V7b19c3X9aEhATWrVvHzJkznQUHICQkhE8++YSAgAAAJkyYgM1m4+OPPyYoKIh69epx5MgRHnzwQefPvP/++1xzzTW8/PLLzm3/+c9/qFKlCnv27KFWrVoXzSQi1tOIk4hcsd27d7NhwwZ69OgBgJ+fH926dWPSpEnOfbZu3Urbtm09/trHjx/nwQcfpGbNmtjtdsLDw8nMzOTQoUNXfOwPPviAJk2aEBkZSWhoKBMnTixw3AYNGjhLE5i/i6uvvpqgoCDntj9G1v6wbds2VqxYQWhoqPNRp04dAPbv33/FuUWk8GjESUSu2KRJk8jNzSU2Nta5zTAMAgMDef/997Hb7QQHB7t9XB8fn3yX+wBycnLyfd+rVy9OnTrFO++8Q1xcHIGBgSQmJl7xRO0vv/ySIUOGMG7cOBITEwkLC+P1119n/fr1+fYLCQlx+9iZmZnccccdvPrqqwWeq1ix4mVnFpHCp+IkIlckNzeXzz//nHHjxnHLLbfke65Tp05Mnz6dRx55hKuvvprk5GT69Olz0eMEBASQl5eXb1tkZCSpqakYhuGcMP7nCdYA3333HR9++CG33XYbAIcPH3ZOsnbVxV77u+++o3nz5jz22GPOba6MBtWuXZspU6aQlZVFYGAgYE5g/7PGjRsze/Zs4uPj8fO7+F/DF8skItbTpToRuSILFy7k999/p1+/ftSvXz/fIykpyXm5buTIkUyfPp2RI0eyc+dOtm/fnm/EJT4+ntWrV3PkyBFn8WndujUnT57ktddeY//+/XzwwQd88803+V6/Zs2afPHFF+zcuZP169fTs2dPt0e34uPjWb9+PQcOHOC3337D4XBQs2ZNNm3axJIlS9izZw/Dhw8vUIAu5l//+hcOh4OHHnqInTt3smTJEt544w0AZ/nr378/p0+fpkePHmzcuJH9+/ezZMkS+vTp4yxLF8skItZTcRKRKzJp0iTatWuH3W4v8FxSUhKbNm3ixx9/pHXr1syaNYv58+fTqFEj2rRpw4YNG5z7vvjiixw4cIDq1asTGRkJQN26dfnwww/54IMPaNiwIRs2bGDIkCEFXv/333+ncePG3HfffTzxxBNERUW5dQ5DhgzB19eXevXqERkZyaFDh3j44Yfp0qUL3bp1o1mzZpw6dSrf6NOlhIeHs2DBArZu3UqjRo0YNmwYI0aMAHDOe4qNjeW7774jLy+PW265hQYNGjBo0CDKli2Lj4/PJTOJiPVsxl8nEIiIiEdNnTqVPn36kJ6efllzvUSk+NAcJxERD/v888+pVq0alSpVYtu2bTz77LPcc889Kk0iXkDFSUTEw1JTUxkxYgSpqalUrFiRrl27MmbMGKtjiYgH6FKdiIiIiIs0OVxERETERSpOIiIiIi5ScRIRERFxkYqTiIiIiItUnERERERcpOIkIiIi4iIVJxEREREXqTiJiIiIuEjFSURERMRF/w8SjmX0Y9VqFQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# scatter of true vs. predicted\n",
    "plt.figure(figsize=(6,6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.7)\n",
    "# reference line y=x\n",
    "lims = [min(y_test.min(), y_pred.min()), max(y_test.max(), y_pred.max())]\n",
    "plt.plot(lims, lims, 'r--', linewidth=1)\n",
    "plt.xlabel('Actual target')\n",
    "plt.ylabel('Predicted target')\n",
    "plt.title('Actual vs Predicted')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33f16a4a",
   "metadata": {
    "papermill": {
     "duration": 0.004189,
     "end_time": "2025-04-21T19:18:54.852078",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.847889",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Ok, let's redo this using the house data now and work through the example!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a44aedbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.861657Z",
     "iopub.status.busy": "2025-04-21T19:18:54.861425Z",
     "iopub.status.idle": "2025-04-21T19:18:54.868988Z",
     "shell.execute_reply": "2025-04-21T19:18:54.868146Z"
    },
    "papermill": {
     "duration": 0.013712,
     "end_time": "2025-04-21T19:18:54.870114",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.856402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 414 entries, 0 to 413\n",
      "Data columns (total 6 columns):\n",
      " #   Column                                  Non-Null Count  Dtype  \n",
      "---  ------                                  --------------  -----  \n",
      " 0   X1 house age                            414 non-null    float64\n",
      " 1   X2 distance to the nearest MRT station  414 non-null    float64\n",
      " 2   X3 number of convenience stores         414 non-null    int64  \n",
      " 3   X4 latitude                             414 non-null    float64\n",
      " 4   X5 longitude                            414 non-null    float64\n",
      " 5   Y house price of unit area              414 non-null    float64\n",
      "dtypes: float64(5), int64(1)\n",
      "memory usage: 19.5 KB\n"
     ]
    }
   ],
   "source": [
    "df2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "09be63dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.880025Z",
     "iopub.status.busy": "2025-04-21T19:18:54.879802Z",
     "iopub.status.idle": "2025-04-21T19:18:54.887703Z",
     "shell.execute_reply": "2025-04-21T19:18:54.887107Z"
    },
    "papermill": {
     "duration": 0.01356,
     "end_time": "2025-04-21T19:18:54.888507",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.874947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 414 entries, 0 to 413\n",
      "Data columns (total 5 columns):\n",
      " #   Column                                  Non-Null Count  Dtype  \n",
      "---  ------                                  --------------  -----  \n",
      " 0   X1 house age                            414 non-null    float64\n",
      " 1   X2 distance to the nearest MRT station  414 non-null    float64\n",
      " 2   X3 number of convenience stores         414 non-null    int64  \n",
      " 3   X4 latitude                             414 non-null    float64\n",
      " 4   X5 longitude                            414 non-null    float64\n",
      "dtypes: float64(4), int64(1)\n",
      "memory usage: 16.3 KB\n"
     ]
    }
   ],
   "source": [
    "X2 = df2.drop(\"Y house price of unit area\", axis=1) #features\n",
    "y2 = df2[\"Y house price of unit area\"] #target\n",
    "X2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "29a5f28b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.897924Z",
     "iopub.status.busy": "2025-04-21T19:18:54.897740Z",
     "iopub.status.idle": "2025-04-21T19:18:54.902516Z",
     "shell.execute_reply": "2025-04-21T19:18:54.901693Z"
    },
    "papermill": {
     "duration": 0.01045,
     "end_time": "2025-04-21T19:18:54.903413",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.892963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X2_train, X2_test, y2_train, y2_test = train_test_split(X2,y2,random_state=136)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1857f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.913056Z",
     "iopub.status.busy": "2025-04-21T19:18:54.912841Z",
     "iopub.status.idle": "2025-04-21T19:18:54.920162Z",
     "shell.execute_reply": "2025-04-21T19:18:54.919257Z"
    },
    "papermill": {
     "duration": 0.013203,
     "end_time": "2025-04-21T19:18:54.921071",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.907868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X2_train,y2_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a0559c17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.930780Z",
     "iopub.status.busy": "2025-04-21T19:18:54.930517Z",
     "iopub.status.idle": "2025-04-21T19:18:54.935489Z",
     "shell.execute_reply": "2025-04-21T19:18:54.934957Z"
    },
    "papermill": {
     "duration": 0.010745,
     "end_time": "2025-04-21T19:18:54.936376",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.925631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y2_pred_train = model.predict(X2_train)\n",
    "y2_pred_test = model.predict(X2_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d57d80d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:54.946014Z",
     "iopub.status.busy": "2025-04-21T19:18:54.945835Z",
     "iopub.status.idle": "2025-04-21T19:18:55.181265Z",
     "shell.execute_reply": "2025-04-21T19:18:55.180500Z"
    },
    "papermill": {
     "duration": 0.241331,
     "end_time": "2025-04-21T19:18:55.182233",
     "exception": false,
     "start_time": "2025-04-21T19:18:54.940902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAAJOCAYAAABBWYj1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACP+0lEQVR4nOzdd3hUZdrH8e+Zmj4hQBIjEEBRmqKCIliw4CJiQVj7rij2RVdE3ZV17SKWtayuil1cO4ouimURFXTBhuIrKlUMzRAwpCfTznn/GDISUkjCJGeS/D7XNRfJmck590k0ued57ud+DMuyLERERERklxx2ByAiIiLSVihxEhEREWkkJU4iIiIijaTESURERKSRlDiJiIiINJISJxEREZFGUuIkIiIi0khKnEREREQaSYmTiIiISCMpcRIR2xiGwc0332x3GLY76qijOOqoo6Kf//zzzxiGwbPPPmtbTDvbOUaRjkqJk0g78cgjj2AYBkOHDm32OTZt2sTNN9/M0qVLYxdYnPv4448xDCP6cLvd9O7dm3PPPZeffvrJ7vCaZNGiRdx8880UFRXZHYpIu+WyOwARiY0XXniBnj178sUXX7B69Wr23nvvJp9j06ZN3HLLLfTs2ZMDDjgg9kHGsT//+c8cfPDBBINBvv76ax5//HHmzp3Ld999R05OTqvGkpubS2VlJW63u0lft2jRIm655RbOO+880tPTWyY4kQ5OI04i7cDatWtZtGgR9913H127duWFF16wO6Q254gjjuAPf/gD559/Pg899BD/+Mc/KCwsZObMmfV+TXl5eYvEYhgGCQkJOJ3OFjm/iDSfEieRduCFF16gU6dOjBkzht///vf1Jk5FRUVcddVV9OzZE6/XS7du3Tj33HPZunUrH3/8MQcffDAA559/fnTqqrrOpmfPnpx33nm1zrlz7UsgEODGG29k8ODB+Hw+kpOTOeKII/joo4+afF+bN2/G5XJxyy231HpuxYoVGIbBv/71LwCCwSC33HILffr0ISEhgc6dO3P44Yczb968Jl8X4JhjjgEiSSnAzTffjGEY/PDDD5x99tl06tSJww8/PPr6559/nsGDB5OYmEhGRgZnnnkm69evr3Xexx9/nL322ovExEQOOeQQPvnkk1qvqa/Gafny5Zx++ul07dqVxMRE9t13X66//vpofNdeey0AvXr1iv78fv755xaJUaSj0lSdSDvwwgsvMG7cODweD2eddRaPPvooX375ZTQRAigrK+OII47gxx9/ZOLEiRx00EFs3bqVOXPmsGHDBvr168ett97KjTfeyMUXX8wRRxwBwPDhw5sUS0lJCU8++SRnnXUWF110EaWlpTz11FOMGjWKL774oklTgFlZWYwYMYJXX32Vm266qcZzr7zyCk6nk9NOOw2IJA7Tp0/nwgsv5JBDDqGkpISvvvqKr7/+muOOO65J9wCwZs0aADp37lzj+GmnnUafPn244447sCwLgGnTpnHDDTdw+umnc+GFF7JlyxYeeughjjzySL755pvotNlTTz3FJZdcwvDhw5k8eTI//fQTJ598MhkZGXTv3r3BeP7v//6PI444ArfbzcUXX0zPnj1Zs2YNb731FtOmTWPcuHGsXLmSl156ifvvv58uXboA0LVr11aLUaRDsESkTfvqq68swJo3b55lWZZlmqbVrVs368orr6zxuhtvvNECrNmzZ9c6h2malmVZ1pdffmkB1jPPPFPrNbm5udaECRNqHR8xYoQ1YsSI6OehUMjy+/01XrNt2zYrKyvLmjhxYo3jgHXTTTc1eH+PPfaYBVjfffddjeP9+/e3jjnmmOjngwYNssaMGdPguery0UcfWYD19NNPW1u2bLE2bdpkzZ071+rZs6dlGIb15ZdfWpZlWTfddJMFWGeddVaNr//5558tp9NpTZs2rcbx7777znK5XNHjgUDAyszMtA444IAa35/HH3/cAmp8D9euXVvr53DkkUdaqampVl5eXo3rVP/sLMuy7rnnHguw1q5d2+IxinRUmqoTaeNeeOEFsrKyOProo4FIfcwZZ5zByy+/TDgcjr7u9ddfZ9CgQZx66qm1zmEYRszicTqdeDweAEzTpLCwkFAoxJAhQ/j666+bfL5x48bhcrl45ZVXoseWLVvGDz/8wBlnnBE9lp6ezvfff8+qVauaFffEiRPp2rUrOTk5jBkzhvLycmbOnMmQIUNqvO7SSy+t8fns2bMxTZPTTz+drVu3Rh/Z2dn06dMnOkX51VdfUVBQwKWXXhr9/gCcd955+Hy+BmPbsmULCxcuZOLEifTo0aPGc4352bVGjCIdhabqRNqwcDjMyy+/zNFHHx2txQEYOnQo9957L/Pnz+d3v/sdEJl6Gj9+fKvENXPmTO69916WL19OMBiMHu/Vq1eTz9WlSxeOPfZYXn31VW677TYgMk3ncrkYN25c9HW33norp5xyCvvssw8DBw7k+OOP549//CP7779/o65z4403csQRR+B0OunSpQv9+vXD5ar9K3Lne1i1ahWWZdGnT586z1u9Mi4vLw+g1uuq2x80pLotwsCBAxt1LztrjRhFOgolTiJt2Icffsgvv/zCyy+/zMsvv1zr+RdeeCGaOO2u+kY2wuFwjdVfzz//POeddx5jx47l2muvJTMzE6fTyfTp06N1Q0115plncv7557N06VIOOOAAXn31VY499thoHQ/AkUceyZo1a/jPf/7Df//7X5588knuv/9+ZsyYwYUXXrjLa+y3336MHDlyl69LTEys8blpmhiGwbvvvlvnKriUlJRG3GHLagsxirQVSpxE2rAXXniBzMxMHn744VrPzZ49mzfeeIMZM2aQmJjIXnvtxbJlyxo8X0PTPp06daqzsWJeXl6N0YjXXnuN3r17M3v27Brn27m4uynGjh3LJZdcEp2uW7lyJVOnTq31uoyMDM4//3zOP/98ysrKOPLII7n55psblTg111577YVlWfTq1Yt99tmn3tfl5uYCkdGf6hV7EFkNuHbtWgYNGlTv11Z/f5v782uNGEU6CtU4ibRRlZWVzJ49mxNPPJHf//73tR6XX345paWlzJkzB4Dx48fz7bff8sYbb9Q6l7V9dVhycjJAnQnSXnvtxWeffUYgEIgee/vtt2stZ68e0ag+J8Dnn3/O4sWLm32v6enpjBo1ildffZWXX34Zj8fD2LFja7zm119/rfF5SkoKe++9N36/v9nXbYxx48bhdDq55ZZbatwzRL4H1XENGTKErl27MmPGjBrfw2effXaXnb67du3KkUceydNPP826detqXaNafT+/1ohRpKPQiJNIGzVnzhxKS0s5+eST63z+0EMPjTbDPOOMM7j22mt57bXXOO2005g4cSKDBw+msLCQOXPmMGPGDAYNGsRee+1Feno6M2bMIDU1leTkZIYOHUqvXr248MILee211zj++OM5/fTTWbNmDc8//zx77bVXjeueeOKJzJ49m1NPPZUxY8awdu1aZsyYQf/+/SkrK2v2/Z5xxhn84Q9/4JFHHmHUqFG1OmP379+fo446isGDB5ORkcFXX33Fa6+9xuWXX97sazbGXnvtxe23387UqVP5+eefGTt2LKmpqaxdu5Y33niDiy++mGuuuQa3283tt9/OJZdcwjHHHMMZZ5zB2rVreeaZZxpVP/Tggw9y+OGHc9BBB3HxxRfTq1cvfv75Z+bOnRvdImfw4MEAXH/99Zx55pm43W5OOumkVotRpEOwaTWfiOymk046yUpISLDKy8vrfc15551nud1ua+vWrZZlWdavv/5qXX755daee+5peTweq1u3btaECROiz1uWZf3nP/+x+vfvb7lcrlpL4u+9915rzz33tLxer3XYYYdZX331Va12BKZpWnfccYeVm5treb1e68ADD7Tefvtta8KECVZubm6N+GhEO4JqJSUlVmJiogVYzz//fK3nb7/9duuQQw6x0tPTrcTERKtv377WtGnTrEAg0OB5q9sRzJo1q8HXVbcj2LJlS53Pv/7669bhhx9uJScnW8nJyVbfvn2tSZMmWStWrKjxukceecTq1auX5fV6rSFDhlgLFy6s9T2sqx2BZVnWsmXLrFNPPdVKT0+3EhISrH333de64YYbarzmtttus/bcc0/L4XDUak0QyxhFOirDsnYatxURERGROqnGSURERKSRlDiJiIiINJISJxEREZFGUuIkIiIi0khKnEREREQaSYmTiIiISCO1+waYpmmyadMmUlNTY7oDvIiIiLQPlmVRWlpKTk4ODkfDY0rtPnHatGkT3bt3tzsMERERiXPr16+nW7duDb6m3SdOqampQOSbkZaWZnM0IiIiEm9KSkro3r17NGdoSLtPnKqn59LS0pQ4iYiISL0aU9Kj4nARERGRRlLiJCIiItJISpxEREREGkmJk4iIiEgjKXESERERaSQlTiIiIiKNZGviFA6HueGGG+jVqxeJiYnstdde3HbbbViWFX2NZVnceOON7LHHHiQmJjJy5EhWrVplY9QiIiLSUdmaON111108+uij/Otf/+LHH3/krrvu4u677+ahhx6Kvubuu+/mwQcfZMaMGXz++eckJyczatQoqqqqbIxcREREOiLD2nF4p5WdeOKJZGVl8dRTT0WPjR8/nsTERJ5//nksyyInJ4err76aa665BoDi4mKysrJ49tlnOfPMM3d5jZKSEnw+H8XFxWqAKSIiIrU0JVewdcRp+PDhzJ8/n5UrVwLw7bff8umnnzJ69GgA1q5dS35+PiNHjox+jc/nY+jQoSxevLjOc/r9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IiK76/PPIy0HeveGDz+EzEy7I5IWosRJRERkd91+OwwYAPPmQUaG3dFIC9KqOhERkeYKBMDjgRdfBMOAlBS7I5IWphEnERGR5njnnUhvpp9/htRUJU0dhBInERGRpnrjDRg7FgYNgj32sDsaaUVKnERERJripZfgtNNg3DiYNQu8XrsjklakxElERKSxtm6FSy6BP/4RXngB3G67I5JWpuJwERGRxrAs6NIFFi+Gfv3AobGHjkg/dRERkV257z4491wwzUjbASVNHZZ+8iIiIg2ZNg2uvhq6d4+0HJAOTYmTiIhIXSwLrr8e/v53uPXWSAKlxKnDU42TiIhIXV5/He64A+65B665xu5oJE4ocRIREanLuHHw3//CccfZHYnEEU3ViYiIVAuH4bLL4P33IwXgSppkJ0qcREREAILBSH+mJ56AX3+1OxqJU5qqExERCQTgzDPhrbfglVdg/Hi7I5I4pcRJRETk8sth7tzIHnQnnmh3NBLHbJ+q27hxI3/4wx/o3LkziYmJ7Lfffnz11VfR5y3L4sYbb2SPPfYgMTGRkSNHsmrVKhsjFhGRducvf4F33lHSJLtka+K0bds2DjvsMNxuN++++y4//PAD9957L506dYq+5u677+bBBx9kxowZfP755yQnJzNq1CiqqqpsjFxERNq8kpLISFNJCey9Nxx7rN0RSRtgWJZl2XXx6667jv/973988skndT5vWRY5OTlcffXVXLO9h0ZxcTFZWVk8++yznHnmmbu8RklJCT6fj+LiYtLS0mIav4iItFHbtsHxx8OKFfDRR3DggXZHJDZqSq5g64jTnDlzGDJkCKeddhqZmZkceOCBPPHEE9Hn165dS35+PiNHjowe8/l8DB06lMWLF9sRsoiItHVbtsAxx8CaNfDhh0qapElsTZx++uknHn30Ufr06cP777/PZZddxp///GdmzpwJQH5+PgBZWVk1vi4rKyv63M78fj8lJSU1HiIiIgBUVcHRR8OmTfDxx3DQQXZHJG2MravqTNNkyJAh3HHHHQAceOCBLFu2jBkzZjBhwoRmnXP69OnccsstsQxTRETai4QEuOIKOOoo2Hdfu6ORNsjWEac99tiD/v371zjWr18/1q1bB0B2djYAmzdvrvGazZs3R5/b2dSpUykuLo4+1q9f3wKRi4hIm7J2LTz1VOTjSy5R0iTNZmvi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mcKWMj+WZdV4zrIstpT56ZOZwj6ZqTZFKCIi0jAlTtJqHA6DCcNz8SW6ySusoNwfImxalPtD5BVW4Et0c+7wXBWGi4hI3FLiJK1qcG4G14/px4AcHyVVITZsq6CkKsTAHB/Xj+mnPk4iIhLX2sSqOmlfBudmcGD3TuocLiIibY4SJ7GFw2Go5YCIiLQ5mqoTERERaSQlTiIiIiKNpMRJREREpJGUOImIiIg0khInERERkUZS4iQiIiLSSEqcRERERBpJiZOIiIhIIylxEhEREWkkJU4iIiIijaTESURERKSRlDiJiIiINJISJxEREZFGUuIkIiIi0khKnEREREQayWV3AC3NsiwASkpKbI5ERERE4lF1jlCdMzSk3SdOpaWlAHTv3t3mSERERCSelZaW4vP5GnyNYTUmvWrDTNNk06ZNpKamYhhGq123pKSE7t27s379etLS0lrtunbR/bZvut/2TffbvnWk+23uvVqWRWlpKTk5OTgcDVcxtfsRJ4fDQbdu3Wy7flpaWrv/D3VHut/2Tffbvul+27eOdL/NudddjTRVU3G4iIiISCMpcRIRERFpJCVOLcTr9XLTTTfh9XrtDqVV6H7bN91v+6b7bd860v22xr22++JwERERkVjRiJOIiIhIIylxEhEREWkkJU4iIiIijaTEqYU8/PDD9OzZk4SEBIYOHcoXX3xhd0gxsXDhQk466SRycnIwDIM333yzxvOWZXHjjTeyxx57kJiYyMiRI1m1apU9we6m6dOnc/DBB5OamkpmZiZjx45lxYoVNV5TVVXFpEmT6Ny5MykpKYwfP57NmzfbFPHuefTRR9l///2j/U+GDRvGu+++G32+Pd1rXe68804Mw2Dy5MnRY+3pnm+++WYMw6jx6Nu3b/T59nSv1TZu3Mgf/vAHOnfuTGJiIvvttx9fffVV9Pn29PuqZ8+etX6+hmEwadIkoP39fMPhMDfccAO9evUiMTGRvfbai9tuu63Glikt9vO1JOZefvlly+PxWE8//bT1/fffWxdddJGVnp5ubd682e7Qdts777xjXX/99dbs2bMtwHrjjTdqPH/nnXdaPp/PevPNN61vv/3WOvnkk61evXpZlZWV9gS8G0aNGmU988wz1rJly6ylS5daJ5xwgtWjRw+rrKws+ppLL73U6t69uzV//nzrq6++sg499FBr+PDhNkbdfHPmzLHmzp1rrVy50lqxYoX1t7/9zXK73dayZcssy2pf97qzL774wurZs6e1//77W1deeWX0eHu655tuuskaMGCA9csvv0QfW7ZsiT7fnu7VsiyrsLDQys3Ntc477zzr888/t3766Sfr/ffft1avXh19TXv6fVVQUFDjZztv3jwLsD766CPLstrfz3fatGlW586drbfffttau3atNWvWLCslJcX65z//GX1NS/18lTi1gEMOOcSaNGlS9PNwOGzl5ORY06dPtzGq2Ns5cTJN08rOzrbuueee6LGioiLL6/VaL730kg0RxlZBQYEFWAsWLLAsK3JvbrfbmjVrVvQ1P/74owVYixcvtivMmOrUqZP15JNPtut7LS0ttfr06WPNmzfPGjFiRDRxam/3fNNNN1mDBg2q87n2dq+WZVl//etfrcMPP7ze59v776srr7zS2muvvSzTNNvlz3fMmDHWxIkTaxwbN26cdc4551iW1bI/X03VxVggEGDJkiWMHDkyeszhcDBy5EgWL15sY2Qtb+3ateTn59e4d5/Px9ChQ9vFvRcXFwOQkZEBwJIlSwgGgzXut2/fvvTo0aPN3284HObll1+mvLycYcOGtet7nTRpEmPGjKlxb9A+f76rVq0iJyeH3r17c84557Bu3Tqgfd7rnDlzGDJkCKeddhqZmZkceOCBPPHEE9Hn2/Pvq0AgwPPPP8/EiRMxDKNd/nyHDx/O/PnzWblyJQDffvstn376KaNHjwZa9ufb7veqa21bt24lHA6TlZVV43hWVhbLly+3KarWkZ+fD1DnvVc/11aZpsnkyZM57LDDGDhwIBC5X4/HQ3p6eo3XtuX7/e677xg2bBhVVVWkpKTwxhtv0L9/f5YuXdru7hXg5Zdf5uuvv+bLL7+s9Vx7+/kOHTqUZ599ln333ZdffvmFW265hSOOOIJly5a1u3sF+Omnn3j00UeZMmUKf/vb3/jyyy/585//jMfjYcKECe3699Wbb75JUVER5513HtD+/lsGuO666ygpKaFv3744nU7C4TDTpk3jnHPOAVr275ESJ5FGmDRpEsuWLePTTz+1O5QWte+++7J06VKKi4t57bXXmDBhAgsWLLA7rBaxfv16rrzySubNm0dCQoLd4bS46nfiAPvvvz9Dhw4lNzeXV199lcTERBsjaxmmaTJkyBDuuOMOAA488ECW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\n",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter of true vs. predicted\n",
    "plt.figure(figsize=(6,6))\n",
    "plt.scatter(y2_test, y2_pred_test, alpha=0.7)\n",
    "# reference line y=x\n",
    "lims = [min(y2_test.min(), y2_pred_test.min()), max(y2_test.max(), y2_pred_test.max())]\n",
    "plt.plot(lims, lims, 'r--', linewidth=1)\n",
    "plt.xlabel('Actual target')\n",
    "plt.ylabel('Predicted target')\n",
    "plt.title('Actual vs Predicted')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ca2d84fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:55.193708Z",
     "iopub.status.busy": "2025-04-21T19:18:55.193461Z",
     "iopub.status.idle": "2025-04-21T19:18:55.198408Z",
     "shell.execute_reply": "2025-04-21T19:18:55.197735Z"
    },
    "papermill": {
     "duration": 0.011876,
     "end_time": "2025-04-21T19:18:55.199609",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.187733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MSE for the train set is 78.792708817237\n",
      "The MSE for the test set is 84.31712903127803\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "# Your code here...\n",
    "print(f\"The MSE for the train set is {mean_squared_error(y2_train, y2_pred_train)}\")\n",
    "print(f\"The MSE for the test set is {mean_squared_error(y2_test, y2_pred_test)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f136722e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:55.211669Z",
     "iopub.status.busy": "2025-04-21T19:18:55.211410Z",
     "iopub.status.idle": "2025-04-21T19:18:55.216692Z",
     "shell.execute_reply": "2025-04-21T19:18:55.216087Z"
    },
    "papermill": {
     "duration": 0.012414,
     "end_time": "2025-04-21T19:18:55.217836",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.205422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generalization gap: 5.52\n",
      "Relative gap: 7.0%\n"
     ]
    }
   ],
   "source": [
    "train_mse = mean_squared_error(y2_train, y2_pred_train)\n",
    "test_mse  = mean_squared_error(y2_test,  y2_pred_test)\n",
    "\n",
    "gap = test_mse - train_mse\n",
    "rel_gap = gap / train_mse * 100\n",
    "\n",
    "print(f\"Generalization gap: {gap:.2f}\")\n",
    "print(f\"Relative gap: {rel_gap:.1f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "493e7682",
   "metadata": {
    "papermill": {
     "duration": 0.005031,
     "end_time": "2025-04-21T19:18:55.228370",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.223339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    ">10% relative difference is fine for demo purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0c424640",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:55.239956Z",
     "iopub.status.busy": "2025-04-21T19:18:55.239726Z",
     "iopub.status.idle": "2025-04-21T19:18:55.266263Z",
     "shell.execute_reply": "2025-04-21T19:18:55.265621Z"
    },
    "papermill": {
     "duration": 0.033741,
     "end_time": "2025-04-21T19:18:55.267352",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.233611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train MSE  : 79.01097203137465 ± 10.34400048940899\n",
      "Val MSE    : 80.94553966936034 ± 41.135474898881334\n",
      "Gap (mean): 1.934567637985694\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "cv_results = cross_validate(\n",
    "    model, X2, y2,\n",
    "    scoring=\"neg_mean_squared_error\",\n",
    "    return_train_score=True,\n",
    "    cv=5\n",
    ")\n",
    "\n",
    "train_scores = -cv_results[\"train_score\"]\n",
    "val_scores   = -cv_results[\"test_score\"]\n",
    "\n",
    "print(\"Train MSE  :\", train_scores.mean(), \"±\", train_scores.std())\n",
    "print(\"Val MSE    :\", val_scores.mean(),   \"±\", val_scores.std())\n",
    "print(\"Gap (mean):\", (val_scores.mean() - train_scores.mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "584050ee",
   "metadata": {
    "papermill": {
     "duration": 0.004923,
     "end_time": "2025-04-21T19:18:55.277797",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.272874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## My Conclusion\n",
    "* Mean MSEs are nearly identical, showing no strong sign of overfitting in model. That the MSE is lower for Train MSE than Test MSE shows that it's slightly better at the train data, as would be expected.\n",
    "* Huge overlap of the validated MSE Standard Errors show low confidence of this conclusion due to an underpowered sample size.\n",
    "\n",
    "AI-based conclusion:\n",
    "\n",
    "\"Our model’s average prediction error on unseen data is about the same as on the training data (MSE ≈ 80), and the mean generalization gap is very small (≈ 2). However, the high variance in validation errors (± 41) indicates that, given our current dataset size, we lack the statistical power to be certain there isn’t a modest over‑ or under‑fit. Collecting more data or using more stable error estimates (e.g. repeated CV) would tighten those confidence limits.\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d719805a",
   "metadata": {
    "papermill": {
     "duration": 0.004817,
     "end_time": "2025-04-21T19:18:55.287723",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.282906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's examine the coefficients of features in the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0e8bb989",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:18:55.298710Z",
     "iopub.status.busy": "2025-04-21T19:18:55.298463Z",
     "iopub.status.idle": "2025-04-21T19:18:55.305977Z",
     "shell.execute_reply": "2025-04-21T19:18:55.305312Z"
    },
    "papermill": {
     "duration": 0.014247,
     "end_time": "2025-04-21T19:18:55.306940",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.292693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>X1 house age</th>\n",
       "      <td>-0.286952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X2 distance to the nearest MRT station</th>\n",
       "      <td>-0.005432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X3 number of convenience stores</th>\n",
       "      <td>0.883835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X4 latitude</th>\n",
       "      <td>198.122832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X5 longitude</th>\n",
       "      <td>-23.446030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>intercept</th>\n",
       "      <td>-2052.114040</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        Coefficient\n",
       "X1 house age                              -0.286952\n",
       "X2 distance to the nearest MRT station    -0.005432\n",
       "X3 number of convenience stores            0.883835\n",
       "X4 latitude                              198.122832\n",
       "X5 longitude                             -23.446030\n",
       "intercept                              -2052.114040"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coef_values = pd.DataFrame(data=model.coef_, index=X2.columns, columns=['Coefficient'])\n",
    "coef_values.loc['intercept'] = model.intercept_\n",
    "coef_values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b659949c",
   "metadata": {
    "papermill": {
     "duration": 0.005111,
     "end_time": "2025-04-21T19:18:55.317434",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.312323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Latitude has the strongest positive correlation with Y house price of unit area, so increase in latitude strongly increases house price on average. Longitude has the strongest negative correlation, but it's far less than latitude. The other variables are near 0 and so do not seem to have much effect on house price. The reason this could be is maybe because latitude takes us to different countries/states/provinces where regional pricing varies, whereas longitude more often takes us to colder more northern areas where houses have lower demand. It's hard to actually know this at all though without significantly more context and data to drive these predictions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdee4c53",
   "metadata": {
    "papermill": {
     "duration": 0.005102,
     "end_time": "2025-04-21T19:18:55.328002",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.322900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### BUT I NEED TO SCALE THE COEFFICIENTS to get a realistic comparison of the effect of coefficients on the target value, to control for large changes in the different units used for each feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bfd98c3",
   "metadata": {
    "papermill": {
     "duration": 0.005167,
     "end_time": "2025-04-21T19:18:55.338435",
     "exception": false,
     "start_time": "2025-04-21T19:18:55.333268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7212572,
     "sourceId": 11503887,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7212712,
     "sourceId": 11504075,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.606654,
   "end_time": "2025-04-21T19:18:55.860443",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-21T19:18:48.253789",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
